#ifndef __PID_H_
#define __PID_H_



/******参数调节说明
1.确定比例增益P 
确定比例增益P 时，首先去掉PID的积分项和微分项，一般是令Ti=0、Td=0（具体见PID的参数设定说明），使PID为纯比例调节。
输入设定为系统允许的最大值的60%~70%，由0逐渐加大比例增益P，直至系统出现振荡；再反过来，从此时的比例增益P逐渐减小，
直至系统振荡消失，记录此时的比例增益P，设定PID的比例增益P为当前值的60%~70%。比例增益P调试完成。 
2.确定积分时间常数Ti
比例增益P确定后，设定一个较大的积分时间常数Ti的初值，然后逐渐减小Ti，直至系统出现振荡，之后在反过来，逐渐加大Ti，
直至系统振荡消失。记录此时的Ti，设定PID的积分时间常数Ti为当前值的150%~180%。积分时间常数Ti调试完成。
3.确定积分时间常数Td
积分时间常数Td一般不用设定，为0即可。若要设定，与确定 P和Ti的方法相同，取不振荡时的30%。
4.系统空载、带载联调，再对PID参数进行微调，直至满足要求
******************/

typedef struct 
{
	float goal_point;       //目标值
    float read_point;       //真实值
	float last_Error;       //上一次误差
	float pre_Error;        //上上次误差
	
	float  Kp;				//控制器的比例放大系数
	float  Ki;				//控制器的积分系数		Ki=(Kp*T)/Ti 	Ti为控制器的积分时间
	float  Kd;				//控制器的微分系数		Kd=(Kp*Td)/T 	Td为控制器的微分时间
}PID;



/*******************
函数名：  PID_Out
函数功能：PID调节并且返回应当调节的值
函数参数：goal_point目标值，read_point读取的真实值
函数返回：应当调节的实际值
*******************/

float	PID_Out(PID *pid);	 



#endif

